{"version":3,"sources":["donut/svgData.js","donut/Slice.js","donut/Donut.js","App.js","index.js"],"names":["svgStyle","radius","Math","PI","height","width","stroke","viewBox","cp","bg","colours","SliceData","slices","sliceIndex","this","randomColours","total","i","length","percentageBrakedown","getSlicesTotal","percentage","push","getPercentageBrakedown","offset","colourOffset","floor","index","getRandomColour","colour","random","includes","dasharray","getDasharray","dashoffset","getDashoffset","sliceColour","getSliceColour","Slice","props","data","ctrl","dashAnim","useState","dash","setDash","useEffect","setTimeout","className","fill","cx","cy","r","strokeWidth","strokeDasharray","strokeDashoffset","Donut","slicedCirlcles","map","slice","getData","key","App","setSlices","setCtrl","donutData","document","querySelector","value","type","onChange","e","n","target","arr","k","num","generateRandomNumMultipleOf5","Controllers","btns","cls","data-index","onClick","t","closest","dataset","querySelectorAll","forEach","btn","classList","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ad1e2f95.chunk.js","sourcesContent":["const svgStyle={\r\n    radius: 100/(2*Math.PI), //circumference = 100 ; r = 100/(2*Math.PI)\r\n    height:'500px',\r\n    width:'500px',\r\n    stroke:6,\r\n    viewBox: \"0 0 50 50\",\r\n    cp :25,\r\n    bg:\"#d2d3d4\"\r\n}\r\n\r\nconst colours = ['#FDF100', '#FBCB00', '#FD8E00','#F85100','#FD0100','#AA30A9','#791E9F','#7441FE', '#0F5FFE', '#188D7B','#23B44F', '#87E03A'];\r\n\r\nclass SliceData{\r\n    constructor(slices, sliceIndex){\r\n        this.slices = slices;\r\n        this.sliceIndex = sliceIndex;\r\n        this.randomColours=[];\r\n    }\r\n\r\n    getSlicesTotal(){\r\n        let total = 0;\r\n        for( let i=0 ; i<this.slices.length; i++){\r\n            total += this.slices[i];\r\n        }\r\n        return total;\r\n    }\r\n    getPercentageBrakedown(){\r\n        const percentageBrakedown = [];\r\n        let total = this.getSlicesTotal();\r\n        for( let i=0 ; i<this.slices.length; i++){\r\n            let percentage = (this.slices[i] / total)*100\r\n            percentageBrakedown.push(percentage)\r\n        }\r\n        return percentageBrakedown;\r\n    }\r\n    getDasharray(){\r\n        const percentageBrakedown = this.getPercentageBrakedown();\r\n        const percentage = percentageBrakedown[this.sliceIndex];\r\n        return `${percentage} ${100-percentage}`;\r\n    }\r\n    getDashoffset(){\r\n        let percentageBrakedown = this.getPercentageBrakedown();\r\n        let offset = 0;\r\n        for ( let i = 0; i<this.sliceIndex; i++){\r\n            offset +=  percentageBrakedown[i];\r\n        }\r\n        offset = this.sliceIndex===0 ? 100 : 100 - offset;\r\n        return `${offset}`\r\n    }\r\n    getSliceColour(){\r\n        if(this.slices.length<colours.length){\r\n            const colourOffset = Math.floor(colours.length /(this.slices.length<=colours.length? this.slices.length : colours.length));\r\n            let index = this.sliceIndex * colourOffset;\r\n            return colours[index];\r\n        }else{\r\n            //get random colour\r\n            return this.getRandomColour();\r\n\r\n        }\r\n\r\n    }\r\n    getRandomColour() {\r\n      const letters = '0123456789ABCDEF';\r\n      let colour = '#';\r\n      for (let i = 0; i < 6; i++) {\r\n        colour += letters[Math.floor(Math.random() * 16)];\r\n      }\r\n      if(!this.randomColours.includes(colour)){\r\n          this.randomColours.push(colour)\r\n          return colour;\r\n      }else{\r\n          this.getRandomColour();\r\n      }\r\n    }\r\n\r\n    getData(){\r\n        return{\r\n            dasharray : this.getDasharray(),\r\n            dashoffset : this.getDashoffset(),\r\n            sliceColour : this.getSliceColour()\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport{colours, svgStyle, SliceData}\r\n","import React,{useEffect, useState} from 'react';\r\n\r\nfunction Slice(props){\r\n    const {cp, radius, stroke, sliceColour, dasharray, dashoffset, ctrl } = props.data;\r\n    const dashAnim = [\r\n        //2 : fills up the donut with fixed point clockwise\r\n        100,\r\n        // 4 : fills up the donut with rotation clockwise\r\n        200,\r\n        // 1 : rotates donut multipletimes;spin\r\n        dashoffset*10,\r\n        // 6 : fills up the donut with random rotation ; between 25 and 100\r\n        Math.floor((Math.random() * 75)+25)\r\n    ]\r\n    const [dash, setDash] = useState(['0 200', `${dashAnim[ctrl]}`]);\r\n    useEffect(()=>{\r\n        setDash(['0 200', `${dashAnim[ctrl]}`])\r\n        setTimeout(()=>{setDash([dasharray,dashoffset])},1000)\r\n    },[setDash,dasharray,dashoffset,ctrl])\r\n    return(\r\n        <circle\r\n            className=\"donut-segment\"\r\n            fill=\"transparent\"\r\n            cx={cp}\r\n            cy={cp}\r\n            r={radius}\r\n            strokeWidth={stroke}\r\n            stroke={sliceColour}\r\n            strokeDasharray={dash[0]}\r\n            strokeDashoffset={dash[1]}>\r\n\r\n        </circle>\r\n    )\r\n}\r\nexport default Slice;\r\n\r\n// // 0 : rotates donut 360%;rotate\r\n//  dashoffset-100,\r\n// // 1 : rotates donut multipletimes;spin\r\n// dashoffset*10,\r\n// //2 : fills up the donut with fixed point clockwise\r\n// 100,\r\n// // 3 : fills up the donut with fixed point counterclockwise\r\n// -1*dashoffset,\r\n// // 4 : fills up the donut with rotation clockwise\r\n// 200,\r\n// // 5 : fills up the donut with rotation counterclockwise\r\n// -100,\r\n// // 6 : fills up the donut with random rotation ; between 25 and 100\r\n// Math.floor((Math.random() * 75)+25)\r\n","import React from 'react';\r\nimport {svgStyle, SliceData} from './svgData';\r\nimport Slice from './Slice';\r\n\r\n\r\nfunction Donut(props){\r\n    const {slices, ctrl} = props.data;\r\n    const{height, width, stroke, viewBox, cp, bg, radius}= svgStyle;\r\n    //get percentage breakdown re each of figure provided\r\n    // get total amount\r\n    // ircumference = 100\r\n    const slicedCirlcles = slices.map((slice,sliceIndex)=>{\r\n        const{dasharray, dashoffset, sliceColour} = new SliceData(slices,sliceIndex).getData();\r\n        const data = {cp, radius, stroke, sliceColour, dasharray, dashoffset, ctrl};\r\n        return <Slice key={sliceIndex+'_svg-circle'} data={data} />\r\n\r\n    })\r\n    return(\r\n        <svg width={width} height={height} viewBox={viewBox} className=\"svg-donut\">\r\n              <circle className=\"donut-ring\" cx={cp} cy={cp} r={radius} fill=\"transparent\" stroke={bg} strokeWidth={stroke}></circle>\r\n              {slicedCirlcles}\r\n\r\n        </svg>\r\n    )\r\n}\r\nexport default Donut;\r\n\r\n\r\n\r\n// {/* <circle class=\"donut-segment\"  cx={cp} cy={cp} r={radius} fill=\"transparent\" stroke=\"#b1c94e\" stroke-width={stroke} stroke-dasharray=\"15 85\" stroke-dashoffset=\"0\"></circle> */}\r\n// {/* 100 - 15  */}\r\n// {/* <circle class=\"donut-segment \"  cx={cp} cy={cp} r={radius} fill=\"transparent\" stroke=\"#ce4b99\" stroke-width={stroke} stroke-dasharray=\"50 50\" stroke-dashoffset=\"85\"></circle> */}\r\n// {/* 100 - (15 + 50) */}\r\n// {/* <circle class=\"donut-segment \"  cx={cp} cy={cp} r={radius} fill=\"transparent\" stroke=\"#377bbc\" stroke-width={stroke} stroke-dasharray=\"10 90\" stroke-dashoffset=\"35\"></circle> */}\r\n// {/* 100 - (15 + 50 + 10) */}\r\n// {/* <circle class=\"donut-segment \"  cx={cp} cy={cp} r={radius} fill=\"transparent\" stroke=\"#472b6c\" stroke-width={stroke} stroke-dasharray=\"25 75\" stroke-dashoffset={cp}></circle> */}\r\n","import React,{useState, useEffect} from 'react';\nimport './App.css';\nimport Donut from './donut/Donut';\n\n\nfunction App() {\n    const [slices, setSlices] = useState([5,5,5,5])\n    const [ctrl, setCtrl] = useState(0)\n    const donutData={\n        slices,\n        ctrl\n    }\n    function handleInputChange(e){\n        const n = e.target.value;\n        if(n&&n>1){\n            if(n>1 && n<=20){\n                const arr = [];\n                for(let k=0; k<n; k++){\n                    const num = generateRandomNumMultipleOf5();\n                    arr.push(num)\n                }\n                setSlices(arr)\n            }else{\n                setSlices([5,5,5,5])\n            }\n        }\n        return;\n\n    }\n    useEffect(()=>{\n        const input = document.querySelector('input');\n        input.value = slices.length;\n    })\n    return (\n    <div className=\"App\">\n        <Donut data={donutData}/>\n        <div className=\"donut-input\">\n            <input type=\"text\" onChange={handleInputChange}/>\n            <p>Enter a number between <br/> 2 and 20</p>\n        </div>\n        <Controllers setCtrl={setCtrl} ctrl={ctrl}/>\n        <p>https://k2project.github.io/donut_chart/</p>\n    </div>\n    );\n}\n\nexport default App;\n\nfunction Controllers(props){\n    const ctrls = ['Fill Up','Rotate & Fill Up', 'Spin',  'Random'];\n\n    function handleClick(e){\n        const t = e.target.closest('.btn');\n        if(t){\n            props.setCtrl(t.dataset.index)\n            const btns = document.querySelectorAll('.btn');\n            btns.forEach((btn,index)=>{\n                btn.classList = 'btn';\n            })\n            t.classList = 'btn current';\n        }\n    }\n    const btns = ctrls.map((ctrl,i)=>{\n        let cls = \"btn\"\n        if(i===props.ctrl){\n            cls = \"btn current\"\n        }\n        return <div key={'ctrl_'+i} data-index= {i} className={cls} >{ctrl}</div>\n    });\n\n    return(\n        <div onClick={handleClick}> {btns} </div>\n    )\n\n}\n\nfunction generateRandomNumMultipleOf5(){\n    const max = 100;\n    const min = 20;\n    let random = Math.floor(Math.random() * (max - min + 1) ) + min;\n    if(random % 5 !== 0){\n        random = random + (5-random%5);\n    }\n    return random;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}